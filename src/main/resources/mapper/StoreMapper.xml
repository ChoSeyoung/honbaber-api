<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.honbaber.api.mapper.StoreMapper">
	<select id="getStore" parameterType="hashmap" resultType="hashmap">
		select store.name,
		       store.img,
		       store.lat,
		       store.lng,
		       store.tel,
		       store.post,
		       store.addr1,
		       store.addr2,
		       (
		       sum(review.sense_rate) / count(review.id) +
		       sum(review.time_rate) / count(review.id) +
		       sum(review.taste_rate) / count(review.id)
		       )/3 as total_rate,
		       count(review.id) as total_rate_cnt,
			   6371 * acos (cos ( radians(#{lat}) )* cos( radians( store.lat ) )* cos( radians( store.lng ) - radians(#{lng}) )
			   + sin ( radians(#{lat}) )* sin( radians( store.lat ) )) as radius
		from store join review on store.id = review.store_id
		<![CDATA[
		where (
			6371 * acos (
			cos ( radians(#{lat}) )
			* cos( radians( store.lat ) )
			* cos( radians( store.lng ) - radians(#{lng}) )
			+ sin ( radians(#{lat}) )
			* sin( radians( store.lat ) )
		)) < #{radius}
		and store.signature_menu like '%'||#{keyword}||'%'
		and store.is_closed_store = 0
		having total_rate >= #{rate}
		]]>
	</select>
	<select id="getStoreDetail" parameterType="integer" resultType="hashmap">
		select store.name,
		       store.img,
		       store.tel,
		       store.post,
		       store.addr1,
		       store.addr2,
		       (
		       sum(review.sense_rate) / count(review.id) +
		       sum(review.time_rate) / count(review.id) +
		       sum(review.taste_rate) / count(review.id)
		       )/3 as total_rate,
		       sum(review.sense_rate) / count(review.id) as sense_rate,
		       sum(review.time_rate) / count(review.id) as time_rate,
		       sum(review.taste_rate) / count(review.id) as taste_rate,
		       detail.website,
		       detail.open_day,
		       detail.open_at,
		       detail.off_day,
		       detail.personal_table_cnt,
		       detail.is_self_side_dish,
		       detail.is_self_water,
		       detail.is_self_payment
		from store join store_detail as detail on store.id = detail.store_id
			join review on store.id = review.store_id
		where store.id = #{id}
	</select>
	<update id="closeStore" parameterType="integer">
		update store set is_closed_store = 1 where id = #{id}
	</update>
	<insert id="registStore" parameterType="hashmap"></insert>
	<select id="getMenu" parameterType="integer" resultType="hashmap">
		select id, menu, price, is_signature
		from menu
		where store_id = #{id}
		order by is_signature desc, menu asc
	</select>
	<update id="putMenu" parameterType="hashmap">
		update menu 
		set menu = #{menu}, 
			price = #{price}, 
			is_signature = #{is_signature}, 
			updated_at = now()
		where id = #{menu_id}
		and store_id = #{store_id} 
	</update>
	<insert id="postMenu" parameterType="hashmap">
		insert into menu (store_id, menu, price, is_signature, created_at, updated_at)
		values(#{store_id}, #{menu}, #{price}, #{is_signature}, now(), now())
	</insert>
	<delete id="deleteMenu" parameterType="integer">
		delete from menu where id = #{menuId}
	</delete>
</mapper>
